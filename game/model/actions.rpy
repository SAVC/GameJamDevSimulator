init python:
    from typing import List  # Импортируем List
    from enum import Enum
    import random
    random.seed()

#   Типы событий
    class EventActionType(str, Enum):
        CODE = "code"
        ASSETS = "assets"
        COFFEE = "coffee"
        SLEEP = "sleep"
        MUSIC = "music"
        SCENARIO = "scenario"

# Базовый класс событий
    class ActionEvents:
        def __init__(self):
            self.code = [
                Event("Код, который работает?", [
                    Action("Попробовать писать код", "Вы нашли баг, который исправили, но появилось два новых.", State(10, -10, 5, 5, -5)),
                    Action("Предложить писать новеллу", "Команда решила, что вы гений, но не в программировании.", State(20, -10, 0, 0, -15))
                ]),
                Event("Рефакторинг", [
                    Action("Переписать старый код", "Вы нашли комментарий 'Здесь волшебство происходит' и все сломалось.", State(0, 0, 0, 0, 0)),
                    Action("Пообщаться с ИИ", "ИИ сказал, что ваш код — это искусство, но никто его не понимает.", State(20, -10, 0, 0, -15))
                ])
            ]
            self.assets = [
                Event("Создание ассетов", [
                    Action("Нарисовать персонажа", "Ваш персонаж выглядит как Пикачу, но команда в восторге.", State(10, -10, 5, 5, -5)),
                    Action("Предложить нарисовать новеллу", "Команда решила, что вы художник, но не программист.", State(20, -10, 0, 0, -15))
                ]),
                Event("Анимация", [
                    Action("Создать анимацию", "Ваша анимация выглядит как танец робота, но это смешно.", State(10, -10, 5, 5, -5)),
                    Action("Предложить нарисовать новеллу", "Команда решила, что вы писатель, но не аниматор.", State(20, -10, 0, 0, -15))
                ])
            ]
            self.coffee = [
                Event("Кофе-брейк", [
                    Action("Выпить эспрессо", "Прилив бодрости (+20 энергии, -5 сплочённости)", State(0, 20, 0, 0, -5)),
                    Action("Угостить команду", "Команда довольна (-10 энергии, +15 сплочённости)", State(0, -10, 0, 0, 15))
                ])
            ]
            self.sleep = [
                Event("Сон", [
                    Action("Лечь спать", "Вы проснулись с идеей, но забыли её через 5 минут.", State(10, -10, 5, 5, -5)),
                    Action("Предложить команде поспать", "Команда решила, что вы ленивец, но они тоже устали.", State(20, -10, 0, 0, -15))
                ]),
                Event("Дневной сон", [
                    Action("Вздремнуть", "Вы проснулись и поняли, что забыли сохранить работу.", State(10, -10, 5, 5, -5)),
                    Action("Предложить команде вздремнуть", "Команда решила, что вы гений, но они тоже хотят спать.", State(20, -10, 0, 0, -15))
                ])
            ]
            self.music = [
                Event("Музыкальный джем", [
                    Action("Создать саундтрек", "Ваша музыка звучит как кот, играющий на пианино, но это забавно.", State(10, -10, 5, 5, -5)),
                    Action("Предложить написать новеллу", "Команда решила, что вы композитор, но не писатель.", State(20, -10, 0, 0, -15))
                ]),
                Event("Звуковые эффекты", [
                    Action("Создать звуки", "Ваши звуки напоминают звуки из старого телевизора, но это круто.", State(10, -10, 5, 5, -5)),
                    Action("Предложить написать новеллу", "Команда решила, что вы звукорежиссер, но не писатель.", State(20, -10, 0, 0, -15))
                ])
            ]
            self.scenario = [
                Event("Создание сценария", [
                    Action("Написать диалог", "Ваш диалог звучит как разговор роботов, но это смешно.", State(10, -10, 5, 5, -5)),
                    Action("Предложить написать новеллу", "Команда решила, что вы сценарист, но не писатель.", State(20, -10, 0, 0, -15))
                ]),
                Event("Создание квеста", [
                    Action("Придумать квест", "Ваш квест напоминает поиск сокровищ в песочнице, но это весело.", State(10, -10, 5, 5, -5)),
                    Action("Предложить написать новеллу", "Команда решила, что вы геймдизайнер, но не писатель.", State(20, -10, 0, 0, -15))
                ])
            ]


#   Достать событие из списка
    def getActionEvent(type: EventActionType) -> 'Event':
        if type is not None:
            return getGenericEvent(getattr(actions, type.value), False)
        return None
