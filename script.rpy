image vasan_avatar = "images/avatars/vasan.png"
image jaysmitty_avatar = "images/avatars/jaysmitty.png"
image dmitry_avatar = "images/avatars/dmitry.png"
image chara_avatar = "images/avatars/chara.png"
image cesar_avatar = "images/avatars/cesar.png"

default state = State(0, 100, 0, 0, 50)
default player_name = ""
default difficulty_multiplier = 1
default hours_to_deadline = 48
default events = Events()
default actions = ActionEvents()
default audio_player = AudioPlayer(state)

define positions.left = Position(xpos=0.25, xanchor=0.5, ypos=0.8)
define positions.right = Position(xpos=0.75, xanchor=0.5, ypos=0.8)
define positions.center = Position(xpos=0.5, xanchor=0.5, ypos=0.8)

# Начало игры
label start:
    show screen show_stats  # Показываем экран с характеристиками
    scene room  # Устанавливаем фон в зависимости от времени
    jump room_event  # Начинаем в комнате

# Первый этап - случайные события
label room_event:
    $ audio_player.play()
    scene room   # Показываем фон комнаты

    # Начинается событие
    python:
        buffAppears = percent_chance(state.team_cohesion)
        debuffAppears = percent_chance(state.probability_of_bugs)
        eventType = getEventType(buffAppears, debuffAppears)

    python:
        if eventType is not None:
            event = getEvent(eventType)

    if eventType is not None and event is not None:
        """
        Событие: "[event.event_name]"
        """

    if eventType is not None and event is not None:
        call screen action_menu(event.actions)
        "[result.effect]"
        $ state.apply(result.increment)
    else:
        "Ничего не интересного не произошло..."
        if eventType is None:
            "События не произошло"

    if (state.despair >= 100):
        "Вы не выдержали и застрелились."
        return
    elif (state.readiness >= 100):
        jump victory
    else:
        jump room_action

# Второй этап - действия
label room_action:
    $ audio_player.play()
    scene room   # Показываем фон комнаты

    # Создаем список с вариантами текста
    $text_variations = [
        "Код сам себя не напишет, давайте быстрее!",
        "Баги ждут, чтобы их создали!",
        "Время — деньги, а у нас ни того, ни другого!",
        "Если не начнем сейчас, игра напишет себя сама... и это будет ужасно!",
        "Дедлайн уже стучится в дверь, пора открывать!",
        "Кофе стынет, а баги множатся!",
        "Если не начнем, придется объяснять инвесторам, почему игра — это просто черный экран.",
        "Время — это иллюзия, дедлайн — нет!",
        "Код, который работает, — это уже победа. Давайте начнем!",
        "Если не начнем сейчас, придется делать игру про ошибку 404.",
         "Сто строк кода – и мы герои. Ноль строк – статисты в своей же драме!",
        "Коммитить или не коммитить? Вот в чём вопрос... а пока 404!",
        "Если код не работает, попробуйте выключить и включить программиста!",
        "Git конфликт! Это как Гражданская война, но в репозитории...",
        "Наш код настолько чистый, что даже линтер плачет от умиления!",
        "Кофе закончился? Это не баг, это апокалипсис!",
        "Эспрессо, капучино, рафаэлло... Лишь бы сердце не сказало: 'Нету!'",
        "Red Bull дал мне крылья... чтобы бежать от дедлайна!",
        "Баги – это как котики: плодятся, если их не исправлять!",
        "Сначала мы пишем баги. Потом пишем багрепорты. Потом пишем резюме!",
        "Это не баг, это 'креативная фича для усиления игрового опыта'!",
        "Дедлайн – как поезд: если опоздал, то уже не догонишь... только если не Hyperloop!",
        "Срок сдачи проекта: вчера. Ваши действия?",
        "Дедлайн приближается. Ваш выбор: паника сейчас или паника с пиццей в 3 ночи!",
        "Программист без интернета – как рыцарь без меча: впечатляет, но бесполезен!",
        "Я не лентяй, я в режиме энергосбережения для важных задач!",
        "Один баг починил – два новых создал. Эффективность 200%!",
        "Наша документация настолько хороша, что даже ChatGPT путается!",
        "Если бы дедлайны были людьми, мы бы уже получили пожизненный срок!",
        "Кодинг – это как магия: чем больше жестов, тем непонятнее результат!",
        "Паттерн 'Написано на коленке' – наш главный архитектурный подход!",
        "Тестировщик спит? Значит, баги выходят на прогулку!",
        "Каждая новая фича – это шанс изобрести новый вид бага!",
        "Оптимизация кода: сначала работало, потом нет. Волшебство!",
        "Чем сложнее баг, тем эпичнее история для тимлида!",
        "Мы не прокрастинируем – мы заряжаемся креативом через бездействие!",
        "Если код работает, лучше его не трогать. Это закон!",
        "У нас два состояния: 'Всё сломалось' и 'Почему это работает?!'",
        "Чем ближе дедлайн, тем красивее наш код... в мечтах!",
        "Программирование – это искусство превращения кофеина в ошибки!",
        "Самый страшный баг – тот, который появляется перед демо!",
        "Если бы баги были криптовалютой, мы бы уже все стали миллионерами!",
        "Каждая строчка кода – шаг к бессмертию... или к крашу!",
        "Мы не пишем баги – мы создаем возможности для апгрейда!",
        "Чем меньше времени, тем больше желание переписать всё с нула!",
        "Код-ревью: когда твои ошибки становятся публичным достоянием!",
        "Наш лозунг: 'Сделано. Не идеально, но до дедлайна!'",
        "Программист – единственная профессия, где 'Это не баг, это фича' – валидное оправдание!",
        "Чем сложнее задача, тем громче звук набираемого кода!",
        "Идеальный код – это миф, как единорог с работающим API!",
        "Чем дольше ищешь баг, тем очевиднее, что это опечатка!",
        "Наш код – как черный ящик: даже мы не знаем, как он работает!",
        "Каждый коммит – маленькая победа... или начало квеста!",
        "Чем больше кофе, тем страшнее потом читать свой код!",
        "Программирование – это когда 90% времени думаешь, 10% – удаляешь код!",
        "Лучший код – тот, который написал коллега, пока ты был в отпуске!",
        "Чем сложнее система, тем веселее объяснять её менеджеру!",
        "Мы не пишем код – мы сражаемся с multidimensional array!",
        "Каждый дедлайн – это квест 'Успеть до того, как поймут, что это невозможно!'",
        "Чем громче ругаешь код, тем больше шансов, что он заработает!",
        "Идеальный программист – тот, кто умеет гуглить ошибки на 5 языках!",
        "Чем дольше проект, тем больше желание назвать его 'Версия 0.9'!",
        "Код – как подросток: непредсказуем и постоянно требует внимания!",
        "Чем больше комментариев, тем меньше веришь, что это работает!",
        "Программистский детектив: 'Кто написал этот ужасный код?... Ой, это я!'",
        "Чем проще задача, тем сложнее объяснить, почему она заняла неделю!",
        "Кодинг – это когда 1 час работы = 10 часов дебаггинга!",
        "Чем круче фича, тем больше шансов, что её вырежут!",
        "Самый страшный кошмар: 'А давайте сделаем как в Figma, только лучше!'",
        "Программист – человек, превращающий 'Это невозможно' в 'Ну, есть костыль...'",
        "Чем ближе релиз, тем чаще слово 'оптимизация' заменяется на 'хаки'!",
        "Лучшая документация – та, которую забыли обновить!",
        "Чем дольше смотришь на код, тем меньше понимаешь, как это работает!",
        "Программирование – единственное занятие, где 2+2 может быть '5 для особых случаев'!",
        "Чем сложнее баг, тем проще решение... которое найдут через месяц!",
        "Идеальный интерфейс – тот, который понятен хотя бы тестировщику!",
        "Чем больше библиотек, тем выше шанс 'Dependency Hell'!",
        "Программистское счастье: 'Оно работает!... Почему оно работает?!'",
        "Чем старше проект, тем страшнее делать 'composer update'!",
        "Код ревью: когда находишь ошибку и думаешь 'Кто это написал?... О, это же я!'",
        "Чем круче анимация, тем чаще она глючит на слабых ПК!",
        "Программист – это переводчик между человеческим и машинным безумием!",
        "Чем больше условий, тем веселее edge cases!",
        "Самый страшный вопрос: 'А можно сделать, чтобы это работало в IE11?'",
        "Чем красивее дизайн, тем сложнее его реализовать без !important!",
        "Программирование – это искусство находить проблемы, о которых никто не подозревал!",
        "Чем дольше проект, тем чаще хочется всё переписать на другом языке!",
        "Лучшая фича – та, которую успели вырезать перед релизом!",
        "Чем сложнее архитектура, тем проще забыть, как всё работает!",
        "Программист – человек, который может устроить апокалипсис одной точкой с запятой!",
        "Чем больше мониторов, тем больше окон с гуглом 'как сделать...'!",
        "Идеальный код – тот, который не нужно поддерживать!",
        "Чем дольше дебаггишь, тем смешнее выглядит ошибка в итоге!",
        "Программирование – это когда 'Hello World' занимает 5 минут, а всё остальное – годы!",
        "Чем круче технология, тем быстрее она устаревает!"
    ]

    # Выбираем случайный текст из списка
    $random_text = renpy.random.choice(text_variations)

    # Выводим выбранный текст
    $random_text

    call screen location_menu  # Снова вызываем меню


# Писать код
label code:
    $ audio_player.play()
    scene computer
    python:
        event = getActionEvent(EventActionType.CODE)

    if event is not None:
        """
        Событие: "[event.event_name]"
        """

    if event is not None:
        call screen action_menu(event.actions)
        "[result.effect]"
        $ state.apply(result.increment)
    else:
        "Ничего не происходит..."
        "События этого типа закончились в списке"
    jump room_team # Переходим на этап общения с командой

# Создавать ассеты
label assets:
    $ audio_player.play()
    scene computer
    python:
        event = getActionEvent(EventActionType.ASSETS)

    if event is not None:
        """
        Событие: "[event.event_name]"
        """

    if event is not None:
        call screen action_menu(event.actions)
        "[result.effect]"
        $ state.apply(result.increment)
    else:
        "Ничего не происходит..."
        "События этого типа закончились в списке"
    jump room_team # Переходим на этап общения с командой

# Пить кофе
label coffee:
    $ audio_player.play()
    scene room
    python:
        event = getActionEvent(EventActionType.COFFEE)

    if event is not None:
        """
        Событие: "[event.event_name]"
        """

    if event is not None:
        call screen action_menu(event.actions)
        "[result.effect]"
        $ state.apply(result.increment)
    else:
        "Ничего не происходит..."
        "События этого типа закончились в списке"
    jump room_team # Переходим на этап общения с командой

# Спать
label sleep:
    $ audio_player.play()
    scene room  # Показываем фон комнаты
    python:
        event = getActionEvent(EventActionType.SLEEP)

    if event is not None:
        """
        Событие: "[event.event_name]"
        """

    if event is not None:
        call screen action_menu(event.actions)
        "[result.effect]"
        $ state.apply(result.increment)
    else:
        "Ничего не происходит..."
        "События этого типа закончились в списке"
    jump room_team # Переходим на этап общения с командой

# Писать музыку
label music:
    $ audio_player.play()
    scene computer  # Показываем фон комнаты
    python:
        event = getActionEvent(EventActionType.MUSIC)

    if event is not None:
        """
        Событие: "[event.event_name]"
        """

    if event is not None:
        call screen action_menu(event.actions)
        "[result.effect]"
        $ state.apply(result.increment)
    else:
        "Ничего не происходит..."
        "События этого типа закончились в списке"
    jump room_team # Переходим на этап общения с командой

# Писать сценарий
label scenario:
    $ audio_player.play()
    scene computer  # Показываем фон комнаты
    python:
        event = getActionEvent(EventActionType.SCENARIO)

    if event is not None:
        """
        Событие: "[event.event_name]"
        """

    if event is not None:
        call screen action_menu(event.actions)
        "[result.effect]"
        $ state.apply(result.increment)
    else:
        "Ничего не происходит..."
        "События этого типа закончились в списке"
    jump room_team # Переходим на этап общения с командой


# Третий этап - общение с командой
label room_team:
    $ audio_player.play()
    scene computer  # Показываем фон компьютера
    "Очередная планерка с командой"
    $ hours_to_deadline -= 1  # Уменьшаем время до дедлайна

    python:
        character, event = get_random_character_event()

    if character is not None and event is not None:
        show expression character.avatar at getattr(positions, character.position) with dissolve
        """
        [character.name]: "[event.event_name]"
        """

    if character is not None and event is not None:
        call screen action_menu(event.actions)
        "[result.effect]"
        $ state.apply(result.increment)
        hide expression character.avatar with dissolve

    if hours_to_deadline <= 0:
        jump ending
    jump room_event

# Добавляем переход на эту метку когда время вышло
label ending:
    # Здесь логика завершения игры
    "Дедлайн наступил! Ваш результат..."
    return

# Метка победы
label victory:
    "Поздравляем! Вы успешно завершили проект!"
    return